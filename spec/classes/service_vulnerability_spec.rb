require 'spec_helper'

describe 'iop::service_vulnerability' do
  on_supported_os.each do |os, facts|
    context "on #{os}" do
      let(:facts) { facts }

      context 'with default parameters' do
        it { should compile.with_all_deps }

        # Vulnerability service tests
        it { should contain_podman__quadlet('iop-service-vuln-dbupgrade') }
        it { should contain_podman__quadlet('iop-service-vuln-manager') }
        it { should contain_podman__quadlet('iop-service-vuln-taskomatic') }
        it { should contain_podman__quadlet('iop-service-vuln-grouper') }
        it { should contain_podman__quadlet('iop-service-vuln-listener') }
        it { should contain_podman__quadlet('iop-service-vuln-evaluator-recalc') }
        it { should contain_podman__quadlet('iop-service-vuln-evaluator-upload') }
        it { should contain_podman__quadlet('iop-service-vuln-vmaas-sync') }
      end

      context 'with ensure => absent' do
        let(:params) { { ensure: 'absent' } }

        it { should compile.with_all_deps }
        it { should contain_podman__quadlet('iop-service-vuln-manager').with_ensure('absent') }
        it { should contain_podman__quadlet('iop-service-vuln-taskomatic').with_ensure('absent') }
      end

      context 'with custom database parameters' do
        let(:params) do
          {
            database_user: 'test_vuln_user',
            database_name: 'test_vuln_db',
            database_password: 'test_vuln_password',
          }
        end

        it { should compile.with_all_deps }
        it { should contain_podman__quadlet('iop-service-vuln-manager') }
        it { should contain_podman__quadlet('iop-service-vuln-taskomatic') }
      end

      context 'secret subscription behavior' do
        let(:vulnerability_services) do
          [
            'iop-service-vuln-dbupgrade',
            'iop-service-vuln-manager',
            'iop-service-vuln-taskomatic',
            'iop-service-vuln-grouper',
            'iop-service-vuln-listener',
            'iop-service-vuln-evaluator-recalc',
            'iop-service-vuln-evaluator-upload',
            'iop-service-vuln-vmaas-sync'
          ]
        end

        let(:database_secrets) do
          [
            'Podman::Secret[iop-service-vulnerability-database-username]',
            'Podman::Secret[iop-service-vulnerability-database-password]',
            'Podman::Secret[iop-service-vulnerability-database-name]',
            'Podman::Secret[iop-service-vulnerability-database-host]',
            'Podman::Secret[iop-service-vulnerability-database-port]'
          ]
        end

        it 'should ensure all vulnerability services subscribe to database secrets' do
          vulnerability_services.each do |service|
            should contain_podman__quadlet(service).with(
              'subscribe' => database_secrets
            )
          end
        end

        it 'should create all required database secrets' do
          should contain_podman__secret('iop-service-vulnerability-database-username')
          should contain_podman__secret('iop-service-vulnerability-database-password')
          should contain_podman__secret('iop-service-vulnerability-database-name')
          should contain_podman__secret('iop-service-vulnerability-database-host')
          should contain_podman__secret('iop-service-vulnerability-database-port')
        end

        it 'should ensure vulnerability services properly subscribe to secrets' do
          vulnerability_services.each do |service|
            should contain_podman__quadlet(service)
              .that_subscribes_to('Podman::Secret[iop-service-vulnerability-database-password]')
          end
        end

        it 'should ensure manager service has subscribe parameter' do
          should contain_podman__quadlet('iop-service-vuln-manager')
            .with_subscribe(database_secrets)
        end

        it 'should ensure taskomatic service has subscribe parameter' do
          should contain_podman__quadlet('iop-service-vuln-taskomatic')
            .with_subscribe(database_secrets)
        end

        it 'should ensure grouper service has subscribe parameter' do
          should contain_podman__quadlet('iop-service-vuln-grouper')
            .with_subscribe(database_secrets)
        end
      end
    end
  end
end